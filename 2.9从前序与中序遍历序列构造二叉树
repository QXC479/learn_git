    public TreeNode buildTree(int[] preorder, int[] inorder) {
        //递归终止条件
        if(preorder.length == 0 || inorder.length == 0){
            return null;
        }
        TreeNode root = new TreeNode(preorder[0]);//先建立根节点
        //为递归下层做准备：下一层的preorder，inorder
        for(int i = 0; i < inorder.length; i++){
            if(preorder[0] == inorder[i]){
                int pre_left[] = Arrays.copyOfRange(preorder, 1, i+1);
                int pre_right[] = Arrays.copyOfRange(preorder, i+1, preorder.length);
                int in_left[] = Arrays.copyOfRange(inorder, 0, i);
                int in_right[] = Arrays.copyOfRange(inorder, i+1, inorder.length);
                //drill down去构造root的左右子树
                root.left = buildTree(pre_left, in_left);
                root.right = buildTree(pre_right, in_right);
                break;
            }
        }
        return root;
    }
