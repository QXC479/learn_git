【树结构】
class TrieNode {
    // 他的26个节点分别指向那些节点
    private TrieNode[] links;
    //26个字母
    private final int R = 26;
    //查看是否到叶子节点
    private boolean isEnd;
    
    //构造器初始化其links数组
    public TrieNode() {
        links = new TrieNode[R];
    }
    //判断当前结点是否包含某个字母的节点，以便查找
    public boolean containsKey(char ch) {
        return links[ch -'a'] != null;
    }
    //获取当前结点的某字母的子节点。可以通过此方法返回走到下一个指定节点
    public TrieNode get(char ch) {
        return links[ch -'a'];
    }
    //将某一节点插入
    public void put(char ch, TrieNode node) {
        links[ch -'a'] = node;
    }
    //设置单词尾部结点
    public void setEnd() {
        isEnd = true;
    }
    public boolean isEnd() {
        return isEnd;
    }
}

【插入】
class Trie {
    private TrieNode root; 
    public Trie() {
        root = new TrieNode();
    }
    // 插入单词的方法
    public void insert(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);
            //如果当前结点不包含需要插入的字母的节点就put
            if (!node.containsKey(currentChar)) {
                node.put(currentChar, new TrieNode());
            }
            //get方法返回对应字母的节点
            node = node.get(currentChar);
        }
        //设置其为单词尾部
        node.setEnd();
    }
}


【查找】
class Trie {
    ...

    // search a prefix or whole key in trie and
    // returns the node where search ends
    private TrieNode searchPrefix(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            //获取当前字母
           char curLetter = word.charAt(i);
           if (node.containsKey(curLetter)) {
               node = node.get(curLetter);
           } else {
               return null;
           }
        }
        return node;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
       TrieNode node = searchPrefix(word);
       //不仅存在，而且还得是单词尾部
       return node != null && node.isEnd();
    }
}


【查找键前缀】
class Trie {
    ...

    public boolean startsWith(String prefix) {
        TrieNode node = searchPrefix(prefix);
        return node != null;
    }
}
